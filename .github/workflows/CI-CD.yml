name: .NET Core Desktop

on:
  push:
    branches: [ "main" , "testing"]
  pull_request:
    branches: [ "main" , "testing" ]

jobs:
  build-AuthenticationAPI:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      
    - name: Restore dependencies AuthenticationAPI
      working-directory: Kwetter-Backend/AuthenticationAPI/
      run: dotnet restore
      
    - name: Build AuthenticationAPI
      working-directory: Kwetter-Backend/AuthenticationAPI/
      run: dotnet build --no-restore -warnaserror
      
  build-MessageAPI:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      
    - name: Restore dependencies MessageAPI
      working-directory: Kwetter-Backend/MessageAPI/
      run: dotnet restore
      
    - name: Build MessageAPI
      working-directory: Kwetter-Backend/MessageAPI/
      run: dotnet build --no-restore -warnaserror
    
  build-UsersAPI:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      
    - name: Restore dependencies UserProfileAPI
      working-directory: Kwetter-Backend/UserProfileAPI/
      run: dotnet restore
      
    - name: Build UserProfileAPI
      working-directory: Kwetter-Backend/UserProfileAPI/
      run: dotnet build --no-restore -warnaserror
  
  build-TweetAPI:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      
    - name: Restore dependencies TweetAPI
      working-directory: Kwetter-Backend/TweetAPI/
      run: dotnet restore
      
    - name: Build TweetAPI
      working-directory: Kwetter-Backend/TweetAPI/
      run: dotnet build --no-restore -warnaserror
      
  build-TimelineAPI:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      
    - name: Restore dependencies TimelineAPI
      working-directory: Kwetter-Backend/TimelineAPI/
      run: dotnet restore
      
    - name: Build TimelineAPI
      working-directory: Kwetter-Backend/TimelineAPI/
      run: dotnet build --no-restore -warnaserror

  RunTests-Tweets:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
       
    - name: Restore dependencies UnitTestTweets
      working-directory: UnitTestTweets/
      run: dotnet restore
      
    - name: Build and Test UnitTestTweets
      working-directory: UnitTestTweets/
      run: dotnet test --no-restore --verbosity normal  
      
  RunTests-Users:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
       
    - name: Restore dependencies UnitTestUserProfile
      working-directory: UnitTestUserProfile/
      run: dotnet restore
      
    - name: Build and Test UnitTestUserProfile
      working-directory: UnitTestUserProfile/
      run: dotnet test --no-restore --verbosity normal

  sonarqube_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

#      - name: SonarQube analysis 
#        run: |
#          cd Kwetter-Backend
#          cd TweetAPI
#          dotnet sonarscanner begin /k:"San-D1909_Kwetter-Backend_Kwetter-Backend_TweetAPI_TweetAPI.sln" /o:"oneblinq1" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.branch.name=main
#          dotnet build
#          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  docker-push:
    runs-on: ubuntu-latest
    needs: [build-MessageAPI, build-AuthenticationAPI, build-UsersAPI,build-TweetAPI,build-TimelineAPI,RunTests-Tweets,RunTests-Users,sonarqube_analysis ]

    steps:      
      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/*.cs"]'
        env:
          RMQCONNECTIONSTRING: ${{ secrets.RABBITMQ_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker Compose 
        run: | 
          export DOCKER_CLIENT_TIMEOUT=600
          ls
          cd Kwetter-Backend
          docker-compose build 
          docker-compose push
  
  azure-deploy:
    runs-on: ubuntu-latest
    needs: docker-push

    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Azure AKS Set Context
        run: |
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az aks get-credentials --resource-group KwetterResource --name KlusterKwetter
          kubectl apply -f https://raw.githubusercontent.com/San-D1909/Kwetter-infra/main/deployment.yaml --namespace ingress-nginx
          kubectl rollout restart deployment tweetapi -n ingress-nginx
          kubectl rollout restart deployment userprofileapi -n ingress-nginx